<?xml version='1.0' encoding='UTF-8'?>
<SmellBaseline>
  <ManuallySuppressedIssues/>
  <CurrentIssues>
    <ID>CyclomaticComplexMethod:RealStore.kt$RealStore$@Suppress("UNCHECKED_CAST") override fun stream(request: StoreReadRequest&lt;Key>): Flow&lt;StoreReadResponse&lt;Output>></ID>
    <ID>CyclomaticComplexMethod:RealStore.kt$RealStore$private fun diskNetworkCombined( request: StoreReadRequest&lt;Key>, sourceOfTruth: SourceOfTruthWithBarrier&lt;Key, Network, Output, Local>, ): Flow&lt;StoreReadResponse&lt;Output>></ID>
    <ID>EmptyDefaultConstructor:SecondaryPagesApi.kt$SecondaryPagesApi$()</ID>
    <ID>ExplicitItLambdaParameter:RealStore.kt$RealStore${ it: Output -> // if we read a value from cache, dispatch it first emit(StoreReadResponse.Data(value = it, origin = StoreReadResponseOrigin.Cache)) }</ID>
    <ID>InstanceOfCheckForException:SourceOfTruthWithBarrier.kt$SourceOfTruthWithBarrier$throwable !is CancellationException</ID>
    <ID>LongMethod:RealStore.kt$RealStore$private fun diskNetworkCombined( request: StoreReadRequest&lt;Key>, sourceOfTruth: SourceOfTruthWithBarrier&lt;Key, Network, Output, Local>, ): Flow&lt;StoreReadResponse&lt;Output>></ID>
    <ID>LongMethod:SourceOfTruthWithBarrier.kt$SourceOfTruthWithBarrier$fun reader(key: Key, lock: CompletableDeferred&lt;Unit>): Flow&lt;StoreReadResponse&lt;Output?>></ID>
    <ID>LongMethod:StoreWithInMemoryCacheTests.kt$StoreWithInMemoryCacheTests$@Test fun storeDeadlock()</ID>
    <ID>LongMethod:UpdaterTests.kt$UpdaterTests$@Test fun givenNonEmptyMarketWhenWriteThenStoredAndAPIUpdated()</ID>
    <ID>MagicNumber:StoreDefaults.kt$StoreDefaults$100</ID>
    <ID>MaxLineLength:FlowStoreTests.kt$FlowStoreTests$fun</ID>
    <ID>MaxLineLength:SourceOfTruthErrorsTests.kt$SourceOfTruthErrorsTests$// givenSourceOfTruthWithFailingWriteWhenAFreshValueReaderArrivesThenItShouldNotGetDiskErrorsFromAPendingWrite() = testScope.runTest {</ID>
    <ID>MaxLineLength:SourceOfTruthErrorsTests.kt$SourceOfTruthErrorsTests$// givenSourceOfTruthWithFailingWriteWhenAPassiveReaderArrivesThenItShouldReceiveTheNewWriteError() = testScope.runTest {</ID>
    <ID>MayBeConst:StoreDefaults.kt$StoreDefaults$/** * Cache size (default is 100), can be overridden * * @return memory cache size */ val cacheSize: Long = 100</ID>
    <ID>TooGenericExceptionCaught:RealMutableStore.kt$RealMutableStore$throwable: Throwable</ID>
    <ID>TooGenericExceptionCaught:RealStore.kt$RealStore$error: Throwable</ID>
    <ID>TooGenericExceptionCaught:SourceOfTruthWithBarrier.kt$SourceOfTruthWithBarrier$throwable: Throwable</ID>
    <ID>TooGenericExceptionThrown:FallbackTests.kt$FallbackTests$throw Exception()</ID>
    <ID>TooGenericExceptionThrown:FetcherResponseTests.kt$FetcherResponseTests$throw RuntimeException("don't catch me")</ID>
    <ID>TooGenericExceptionThrown:HardcodedPages.kt$HardcodedPages$throw Exception()</ID>
    <ID>TooGenericExceptionThrown:LocalOnlyTests.kt$LocalOnlyTests$throw RuntimeException("Fetcher shouldn't be hit")</ID>
    <ID>TooGenericExceptionThrown:NotesApi.kt$NotesApi$throw Exception()</ID>
    <ID>TooGenericExceptionThrown:NotesBookkeeping.kt$NotesBookkeeping$throw Exception()</ID>
    <ID>TooGenericExceptionThrown:NotesDatabase.kt$NotesDatabase$throw Exception()</ID>
    <ID>TooGenericExceptionThrown:PrimaryPagesApi.kt$PrimaryPagesApi$throw Exception()</ID>
    <ID>TooGenericExceptionThrown:SecondaryPagesApi.kt$SecondaryPagesApi$throw Exception()</ID>
    <ID>TooGenericExceptionThrown:StoreReadResponse.kt$StoreReadResponse$throw RuntimeException("cannot swap type for StoreResponse.Data")</ID>
    <ID>TooGenericExceptionThrown:store.kt$throw Exception("MutableStore requires Store to be built using StoreBuilder")</ID>
    <ID>TooManyFunctions:RealMutableStore.kt$RealMutableStore&lt;Key : Any, Network : Any, Output : Any, Local : Any> : MutableStoreKeyAll</ID>
    <ID>UnusedParameter:PrimaryPagesApi.kt$PrimaryPagesApi$ttl: Long?</ID>
    <ID>UnusedPrivateProperty:RealMutableStore.kt$RealMutableStore.Companion$private const val UNKNOWN_ERROR = "Unknown error occurred"</ID>
    <ID>UnusedPrivateProperty:SourceOfTruthWithBarrier.kt$SourceOfTruthWithBarrier$private val converter: Converter&lt;Network, Local, Output>? = null</ID>
    <ID>UseCheckOrError:ClearAllStoreTests.kt$ClearAllStoreTests$throw IllegalStateException("Unknown key")</ID>
    <ID>UseCheckOrError:ClearStoreByKeyTests.kt$ClearStoreByKeyTests$throw IllegalStateException("Unknown key")</ID>
    <ID>UseCheckOrError:FetcherController.kt$FetcherController.&lt;no name provided>$throw IllegalStateException("Not used")</ID>
    <ID>UseCheckOrError:RealStoreBuilder.kt$DefaultConverter$throw IllegalStateException("non mutable store never call this function")</ID>
    <ID>UseRequire:StoreWithInMemoryCacheTests.kt$StoreWithInMemoryCacheTests.&lt;no name provided>$throw IllegalArgumentException("$key value: $value")</ID>
  </CurrentIssues>
</SmellBaseline>
