# This workflow will build the project with Gradle, run integration tests, and release.
# Because secrets are not available on external forks, this job is expected to fail
# on external pull requests.

name: Build project & run tests

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  publish:
    runs-on: ubuntu-latest
    if: github.repository == 'dropbox/Store' && github.ref == 'refs/heads/main'

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Set up our JDK environment
        uses: actions/setup-java@v1.4.3
        with:
          java-version: 1.8

      - name: Upload Artifacts
        run: ./gradlew publishAllPublicationsToMavenCentralRepository --no-daemon --no-parallel
        env:
          ORG_GRADLE_PROJECT_mavenCentralUsername: ${{ secrets.SONATYPE_USERNAME }}
          ORG_GRADLE_PROJECT_mavenCentralPassword: ${{ secrets.SONATYPE_PASSWORD }}
          ORG_GRADLE_PROJECT_signingInMemoryKey: ${{ secrets.SIGNING_KEY }}
          ORG_GRADLE_PROJECT_signingInMemoryKeyPassword: ${{ secrets.SIGNING_PASSWORD }}

      - name: Retrieve version
        run: |
          echo "VERSION_NAME=$(cat gradle.properties | grep -w "VERSION_NAME" | cut -d'=' -f2)" >> $GITHUB_ENV
      - name: Publish release
        run: ./gradlew closeAndReleaseRepository --no-daemon --no-parallel
        if: "!endsWith(env.VERSION_NAME, '-SNAPSHOT')"
        env:
          ORG_GRADLE_PROJECT_mavenCentralUsername: ${{ secrets.SONATYPE_USERNAME }}
          ORG_GRADLE_PROJECT_mavenCentralPassword: ${{ secrets.SONATYPE_PASSWORD }}
          
      - name: Prepare next development version
        run: |
          sed -i -e "s/${VERSION_NAME}/${VERSION_NAME}-SNAPSHOT/g" gradle.properties
          git config --local user.email "dropbox[bot]@users.noreply.github.com"
          git config --local user.name "dropbox[bot]"
          git commit -m "Prepare next development version" -a
        if: "!endsWith(env.VERSION_NAME, '-SNAPSHOT')"

      - name: Push changes
        uses: ad-m/github-push-action@master
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          branch: ${{ github.ref }}
        if: "!endsWith(env.VERSION_NAME, '-SNAPSHOT')"          

  test:
    runs-on: ubuntu-latest
    timeout-minutes: 30

    strategy:
      fail-fast: false
      matrix:
        api-level:
          - 29

    steps:
    - name: Checkout
      uses: actions/checkout@v2

    - name: Set up our JDK environment
      uses: actions/setup-java@v1.4.3
      with:
        java-version: 1.8
    - name: Run tests
      uses: reactivecircus/android-emulator-runner@v2
      with:
            api-level: 29
            script: ./gradlew clean cleanBuildCache check --stacktrace
      env:
        API_LEVEL: ${{ matrix.api-level }}
    - name: Upload code coverage
      run: bash <(curl -s https://codecov.io/bash)
